var hash = require('./hash');
var io;

lists = {};

function makeListName(listid) {
	return "synclist:" + listid;
}

function add(listid, itemid, itemdata) {
	// TODO: Does the list exist?
	// TODO: can items be added by clients?
	lists[listid].setItem(itemid, itemdata);
	io.sockets.in(makeListName(listid)).emit('list-add', { listid : listid, itemid : itemid, itemdata : itemdata } );
}

function remove(listid, itemid) {
	lists[listid].removeItem(itemid);
	io.sockets.in(makeListName(listid)).emit('list-remove', { listid : listid, itemid : itemid } );
}

function clear(listid) {
	lists[listid].clear();
	io.sockets.in(makeListName(listid)).emit('list-clear', { listid : listid });
}

function set(listid, itemid, itemdata) {
	// TODO: make sure itemid exists
	lists[listid].setItem(itemid, itemdata);
	io.sockets.in(makeListName(listid)).emit('list-set', { listid : listid, itemid : itemid, itemdata : itemdata } );
}

function makelistwrapper(listid) {
	return {
		add : function(itemdata, itemid) {
			if (undefined === itemid) {
				itemid = lists[listid].length;
			}
			add(listid, itemid, itemdata);
			return itemid;
		},
		
		remove : function(itemid) {
			remove(listid, itemid);
		},
		
		clear : function() {
			clear(listid);
		},

		get : function(itemid) {
			return lists[listid].getItem(itemid);
		},

		set : function(itemid, itemdata) {
			set(listid, itemid, itemdata);
		},

		contains : function(itemid) {
			return lists[listid].hasItem(itemid);
		},

		id : listid
	};
}

function create(listid) {
	if (undefined === lists[listid]) {
		lists[listid] = new hash.Hash();
	}
	
	return makelistwrapper(listid);
}

function open(listid) {
	if (undefined === lists[listid]) {
		return null;
	}

	return makelistwrapper(listid);
}

function destroy(listid) {
	delete lists[listid];
}

function listify(socket) {
	socket.on('list-add', function(data) {
		console.log("List add " + data.itemid);
		add(data.listid, data.itemid, data.itemdata);
	});
	
	socket.on('list-remove', function(data) {
		console.log("List remove " + data.itemid);
		remove(data.listid, data.itemid);
	});
	
	socket.on('list-clear', function(data) {
		console.log("List clear " + data.listid);
		clear(data.listid);
	});
	
	socket.on('list-subscribe', function(data) {
		console.log("List subscribe " + data.listid);
		create(data.listid);
		socket.join(makeListName(data.listid));
		socket.emit('list-data', { listid : data.listid, listdata : lists[data.listid].items } );
	});
	
	socket.on('list-unsubscribe', function(data) {
		console.log("List unsub " + data.listid);
		socket.leave(makeListName(data.listid));
	});
}

// ctor, init with socket.io
function listen(socketio) {
	io = socketio;

	io.sockets.on('connection', function (socket) {
		console.log('synclist connnection');
		listify(socket);
	});

	return {
		create : create,
		open : open,
		destroy : destroy
	};
};

exports.listen = listen;