var io;

var zmotes = {}

function forwardToZmote(socket, msg) {
	socket.on(msg, function(data) {
		var socketid = zmotes[socket.zmote_connectedto];
		io.sockets.socket(socketid).emit(msg, data);
	});
}

function zemotify(socket) {
	
	//-------------------------------------------------------------------------
	// Clients send these (controllers)
	//-------------------------------------------------------------------------

	socket.on('zmote-connect', function(data) {
		var socketid = zmotes[data.zmoteid];
		io.sockets.socket(socketid).emit('zmote-connect', { clientid : socket.id } );
	});

	socket.on('zmote-disconnect', function(data) {
		var socketid = zmotes[socket.zmote_connectedto];
		delete socket.zmote_connectedto;
		io.sockets.socket(socketid).emit('zmote-disconnect', { clientid : socket.id } );
	});

	forwardToZmote(socket, 'zmote-orientation');
	forwardToZmote(socket, 'zmote-cursor');
	
	//-------------------------------------------------------------------------
	// Receivers send these
	//-------------------------------------------------------------------------

	socket.on('zmote-register', function(data) {
		// TODO make sure id doesn't exist
		register(data.zmoteid, socket);
	})

	socket.on('zmote-unregister', function(data) {
		// only a receiver can unregister itself
		unregister(socket.zmoteid);
	});

	socket.on('zmote-connected', function(data) {
		io.sockets.socket(data.clientid).emit('zmote-connected', data);
		// the receiver is letting someone know he was bound successfully
		if (data.success) {
			var clientsocket = io.sockets.socket(data.clientid);
			clientsocket.zmote_connectedto = socket.zmoteid;
		}
	});

	socket.on('disconnect', function() {
		// if this socket was a zmote receiver, make sure to unregister it
		if (undefined !== socket.zmoteid) {
			unregister(socket.zmotename);
		}

		// if it was a zmote controller, "disconnect" from receiver
		if (undefined !== socket.zmote_connectedto) {
			var socketid = zmotes[socket.zmote_connectedto];
			io.sockets.socket(socketid).emit('zmote-disconnect', {} );
		}
	});
}

function register(zmoteid, socket) {
	zmotes[zmoteid] = socket.id;
	socket.zmoteid = zmoteid;
}

function unregister(zmoteid) {
	try {
		delete zmotes[zmoteid];
	} catch(e) {}
}

// ctor, init with socket.io
function listen(socketio) {
	io = socketio;

	io.sockets.on('connection', function (socket) {
		zemotify(socket);
	});

	return {
		register : register,
		unregister : unregister,
	}
};

exports.listen = listen;
